/*
 * generated by Xtext 2.10.0
 */
package se.mdh.idt.xmarte.validation

import org.eclipse.xtext.validation.Check
import se.mdh.idt.xmarte.xMarte.XComponent

import static se.mdh.idt.xmarte.xMarte.XMartePackage.Literals.XCOMPONENT__ALLOCATED_KIND
import static se.mdh.idt.xmarte.xMarte.XMartePackage.Literals.XCOMPONENT__HW_CACHE_LEVEL
import static se.mdh.idt.xmarte.xMarte.XMartePackage.Literals.XCOMPONENT__HW_PROCESSOR_CORES

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XMarteValidator extends AbstractXMarteValidator {

	public static val ALLOCATED_KIND_ERROR_CODE = 'allocatedKindError'
	public static val ALLOCATED_KIND_ERROR_MESSAGE = 'Illegal attribute - Allocated stereotype required'

	public static val HWPROCESSOR_CORES_ERROR_CODE = 'hwProcessorCoresError'
	public static val HWPROCESSOR_CORES_ERROR_MESSAGE = 'Illegal attribute - HwProcessor stereotype required'

	public static val HWCACHE_LEVEL_ERROR_CODE = 'hwCacheLevelError'
	public static val HWCACHE_LEVEL_ERROR_MESSAGE = 'Illegal attribute - HwCache stereotype required'

	@Check def check_Allocated_kind(XComponent it) {
		if (isAllocatedKind && !isAllocated) {
			error(ALLOCATED_KIND_ERROR_MESSAGE, XCOMPONENT__ALLOCATED_KIND, ALLOCATED_KIND_ERROR_CODE)
		}
	}

	@Check def check_HwProcessor_cores(XComponent it) {
		if (isHwProcessorCores && !isHwProcessor) {
			error(HWPROCESSOR_CORES_ERROR_MESSAGE, XCOMPONENT__HW_PROCESSOR_CORES, HWPROCESSOR_CORES_ERROR_CODE)
		}
	}

	@Check def check_HwCache_level(XComponent it) {
		if (isHwCacheLevel && !isHwCache) {
			error(HWCACHE_LEVEL_ERROR_MESSAGE, XCOMPONENT__HW_CACHE_LEVEL, HWCACHE_LEVEL_ERROR_CODE)
		}
	}
}

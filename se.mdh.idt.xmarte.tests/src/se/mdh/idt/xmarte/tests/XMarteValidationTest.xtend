/*
 * generated by Xtext 2.10.0
 */
package se.mdh.idt.xmarte.tests

import com.google.inject.Inject
import org.eclipse.uml2.uml.Model
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.eclipse.xtext.diagnostics.Severity.ERROR
import static se.mdh.idt.xmarte.validation.XMarteValidator.ALLOCATED_KIND_ERROR_CODE
import static se.mdh.idt.xmarte.validation.XMarteValidator.ALLOCATED_KIND_ERROR_MESSAGE
import static se.mdh.idt.xmarte.validation.XMarteValidator.HWCACHE_LEVEL_ERROR_CODE
import static se.mdh.idt.xmarte.validation.XMarteValidator.HWCACHE_LEVEL_ERROR_MESSAGE
import static se.mdh.idt.xmarte.validation.XMarteValidator.HWPROCESSOR_CORES_ERROR_CODE
import static se.mdh.idt.xmarte.validation.XMarteValidator.HWPROCESSOR_CORES_ERROR_MESSAGE
import static se.mdh.idt.xmarte.xMarte.XMartePackage.Literals.XCOMPONENT

@RunWith(XtextRunner)
@InjectWith(XMarteInjectorProvider)
class XMarteValidationTest {

	@Inject extension ParseHelper<Model>
	@Inject extension ValidationTestHelper

	@Test def void testAllocatedKindError() {
		'''
			model aModel {
				component aComponent {
					kind = application	
				}
			}
		'''.parse => [assertIssue(XCOMPONENT, ALLOCATED_KIND_ERROR_CODE, ERROR, ALLOCATED_KIND_ERROR_MESSAGE)]
	}

	@Test def void testAllocatedKindSuccess() {
		'''
			model aModel {
				allocated component aComponent {
					kind = application
				}
			}
		'''.parse => [assertNoIssues(XCOMPONENT, ALLOCATED_KIND_ERROR_CODE, ERROR, ALLOCATED_KIND_ERROR_MESSAGE)]
	}

	@Test def void testHwProcessorCoresError() {
		'''
			model aModel {
				component aComponent {
					cores = 2
				}
			}
		'''.parse => [assertIssue(XCOMPONENT, HWPROCESSOR_CORES_ERROR_CODE, ERROR, HWPROCESSOR_CORES_ERROR_MESSAGE)]
	}

	@Test def void testHwProcessorCoresSuccess() {
		'''
			model aModel {
				processor component aComponent {
					cores = 2
				}
			}
		'''.parse => [assertNoIssues(XCOMPONENT, HWPROCESSOR_CORES_ERROR_CODE, ERROR, HWPROCESSOR_CORES_ERROR_MESSAGE)]
	}

	@Test def void testHwCacheLevelError() {
		'''
			model aModel {
				component aComponent {
					level = 1
				}
			}
		'''.parse => [assertIssue(XCOMPONENT, HWCACHE_LEVEL_ERROR_CODE, ERROR, HWCACHE_LEVEL_ERROR_MESSAGE)]
	}

	@Test def void testHwCacheLevelSuccess() {
		'''
			model aModel {
				cache component aComponent {
					level = 1
				}
			}
		'''.parse => [assertNoIssues(XCOMPONENT, HWCACHE_LEVEL_ERROR_CODE, ERROR, HWCACHE_LEVEL_ERROR_MESSAGE)]
	}
	
	@Test def void testHwProcessorCaches() {
		'''
			model aModel {
				processor component aProcessor {
					cores = 2
					cache component aCache {
						level = 1
					}
				}
			}
		'''.parse => [assertNoIssues]
	}
}
